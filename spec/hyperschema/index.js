// This file is autogenerated by the hyperschema compiler
// Schema Version: 1
/* eslint-disable camelcase */
/* eslint-disable quotes */

const VERSION = 1
const { c } = require('hyperschema/runtime')

// eslint-disable-next-line no-unused-vars
let version = VERSION

// @hyperdb-extension/range
const encoding0 = {
  preencode (state, m) {
    state.end++ // max flag is 32 so always one byte

    if (m.gt) c.buffer.preencode(state, m.gt)
    if (m.gte) c.buffer.preencode(state, m.gte)
    if (m.lt) c.buffer.preencode(state, m.lt)
    if (m.lte) c.buffer.preencode(state, m.lte)
    if (m.limit) c.int.preencode(state, m.limit)
  },
  encode (state, m) {
    const flags =
      (m.gt ? 1 : 0) |
      (m.gte ? 2 : 0) |
      (m.lt ? 4 : 0) |
      (m.lte ? 8 : 0) |
      (m.reverse ? 16 : 0) |
      (m.limit ? 32 : 0)

    c.uint.encode(state, flags)

    if (m.gt) c.buffer.encode(state, m.gt)
    if (m.gte) c.buffer.encode(state, m.gte)
    if (m.lt) c.buffer.encode(state, m.lt)
    if (m.lte) c.buffer.encode(state, m.lte)
    if (m.limit) c.int.encode(state, m.limit)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      gt: (flags & 1) !== 0 ? c.buffer.decode(state) : null,
      gte: (flags & 2) !== 0 ? c.buffer.decode(state) : null,
      lt: (flags & 4) !== 0 ? c.buffer.decode(state) : null,
      lte: (flags & 8) !== 0 ? c.buffer.decode(state) : null,
      reverse: (flags & 16) !== 0,
      limit: (flags & 32) !== 0 ? c.int.decode(state) : 0
    }
  }
}

// @hyperdb-extension/message.blocks
const encoding1_5 = c.array(c.uint)

// @hyperdb-extension/message
const encoding1 = {
  preencode (state, m) {
    c.uint.preencode(state, m.type)
    state.end++ // max flag is 64 so always one byte

    if (m.version) c.uint.preencode(state, m.version)
    if (m.collectionName) c.string.preencode(state, m.collectionName)
    if (m.range) encoding0.preencode(state, m.range)
    if (m.query) c.buffer.preencode(state, m.query)
    if (m.blocks) encoding1_5.preencode(state, m.blocks)
    if (m.start) c.uint.preencode(state, m.start)
    if (m.end) c.uint.preencode(state, m.end)
  },
  encode (state, m) {
    const flags =
      (m.version ? 1 : 0) |
      (m.collectionName ? 2 : 0) |
      (m.range ? 4 : 0) |
      (m.query ? 8 : 0) |
      (m.blocks ? 16 : 0) |
      (m.start ? 32 : 0) |
      (m.end ? 64 : 0)

    c.uint.encode(state, m.type)
    c.uint.encode(state, flags)

    if (m.version) c.uint.encode(state, m.version)
    if (m.collectionName) c.string.encode(state, m.collectionName)
    if (m.range) encoding0.encode(state, m.range)
    if (m.query) c.buffer.encode(state, m.query)
    if (m.blocks) encoding1_5.encode(state, m.blocks)
    if (m.start) c.uint.encode(state, m.start)
    if (m.end) c.uint.encode(state, m.end)
  },
  decode (state) {
    const r0 = c.uint.decode(state)
    const flags = c.uint.decode(state)

    return {
      type: r0,
      version: (flags & 1) !== 0 ? c.uint.decode(state) : 0,
      collectionName: (flags & 2) !== 0 ? c.string.decode(state) : null,
      range: (flags & 4) !== 0 ? encoding0.decode(state) : null,
      query: (flags & 8) !== 0 ? c.buffer.decode(state) : null,
      blocks: (flags & 16) !== 0 ? encoding1_5.decode(state) : 0,
      start: (flags & 32) !== 0 ? c.uint.decode(state) : 0,
      end: (flags & 64) !== 0 ? c.uint.decode(state) : 0
    }
  }
}

function setVersion (v) {
  version = v
}

function encode (name, value, v = VERSION) {
  version = v
  return c.encode(getEncoding(name), value)
}

function decode (name, buffer, v = VERSION) {
  version = v
  return c.decode(getEncoding(name), buffer)
}

function getEnum (name) {
  switch (name) {
    default: throw new Error('Enum not found ' + name)
  }
}

function getEncoding (name) {
  switch (name) {
    case '@hyperdb-extension/range': return encoding0
    case '@hyperdb-extension/message': return encoding1
    default: throw new Error('Encoder not found ' + name)
  }
}

function getStruct (name, v = VERSION) {
  const enc = getEncoding(name)
  return {
    preencode (state, m) {
      version = v
      enc.preencode(state, m)
    },
    encode (state, m) {
      version = v
      enc.encode(state, m)
    },
    decode (state) {
      version = v
      return enc.decode(state)
    }
  }
}

const resolveStruct = getStruct // compat

module.exports = { resolveStruct, getStruct, getEnum, getEncoding, encode, decode, setVersion, version }
