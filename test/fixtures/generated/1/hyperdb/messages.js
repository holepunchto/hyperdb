// This file is autogenerated by the hyperschema compiler
// Schema Version: 2
/* eslint-disable camelcase */
/* eslint-disable quotes */

const VERSION = 2
const { c } = require('hyperschema/runtime')

// eslint-disable-next-line no-unused-vars
let version = VERSION

// @db/member
const encoding0 = {
  preencode (state, m) {
    c.string.preencode(state, m.id)
    c.uint.preencode(state, m.age)
  },
  encode (state, m) {
    c.string.encode(state, m.id)
    c.uint.encode(state, m.age)
  },
  decode (state) {
    const res = {}
    res.id = null
    res.age = 0

    res.id = c.string.decode(state)
    res.age = c.uint.decode(state)

    return res
  }
}

// @db/members/value
const encoding1 = {
  preencode (state, m) {
    c.uint.preencode(state, m.age)
  },
  encode (state, m) {
    c.uint.encode(state, m.age)
  },
  decode (state) {
    const res = {}
    res.age = 0

    res.age = c.uint.decode(state)

    return res
  }
}

const StructMap = new Map([
  ['@db/member', encoding0],
  ['@db/members/value', encoding1]
])

function resolveStruct (name, v = VERSION) {
  const enc = StructMap.get(name)
  if (!enc) throw new Error('Encoder not found' + name)
  return {
    preencode (state, m) {
      version = v
      enc.preencode(state, m)
    },
    encode (state, m) {
      version = v
      enc.encode(state, m)
    },
    decode (state) {
      version = v
      return enc.decode(state)
    }
  }
}

module.exports = { resolveStruct, version }
