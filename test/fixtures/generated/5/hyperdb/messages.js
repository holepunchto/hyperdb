// This file is autogenerated by the hyperschema compiler
// Schema Version: 1
/* eslint-disable camelcase */
/* eslint-disable quotes */

const VERSION = 1
const { c } = require('hyperschema/runtime')

// eslint-disable-next-line no-unused-vars
let version = VERSION

// @db/member
const encoding0 = {
  preencode (state, m) {
    c.string.preencode(state, m.id)
    state.end++ // max flag is 1 so always one byte
  },
  encode (state, m) {
    const flags = m.present ? 1 : 0

    c.string.encode(state, m.id)
    c.uint.encode(state, flags)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: r0,
      present: (flags & 1) !== 0
    }
  }
}

// @db/member/hyperdb#0
const encoding1 = {
  preencode (state, m) {
    state.end++ // max flag is 1 so always one byte
  },
  encode (state, m) {
    const flags = m.present ? 1 : 0

    c.uint.encode(state, flags)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      id: null,
      present: (flags & 1) !== 0
    }
  }
}

function setVersion (v) {
  version = v
}

function encode (name, value, v = VERSION) {
  version = v
  return c.encode(getEncoding(name), value)
}

function decode (name, buffer, v = VERSION) {
  version = v
  return c.decode(getEncoding(name), buffer)
}

function getEnum (name) {
  switch (name) {
    default: throw new Error('Enum not found ' + name)
  }
}

function getEncoding (name) {
  switch (name) {
    case '@db/member': return encoding0
    case '@db/member/hyperdb#0': return encoding1
    default: throw new Error('Encoder not found ' + name)
  }
}

function getStruct (name, v = VERSION) {
  const enc = getEncoding(name)
  return {
    preencode (state, m) {
      version = v
      enc.preencode(state, m)
    },
    encode (state, m) {
      version = v
      enc.encode(state, m)
    },
    decode (state) {
      version = v
      return enc.decode(state)
    }
  }
}

const resolveStruct = getStruct // compat

module.exports = { resolveStruct, getStruct, getEnum, getEncoding, encode, decode, setVersion, version }
