// This file is autogenerated by the hyperschema compiler
// Schema Version: 1
/* eslint-disable camelcase */
/* eslint-disable quotes */
/* eslint-disable space-before-function-paren */

const { c } = require('hyperschema/runtime')

const VERSION = 1

// eslint-disable-next-line no-unused-vars
let version = VERSION

const encoding0_enum = {
  NotSpecified: 1,
  Male: 2,
  Female: 3
}

// @db/gender enum
const encoding0 = {
  preencode (state, m) {
    state.end++ // max enum is 3 so always one byte
  },
  encode (state, m) {
    if (m > 3) throw new Error('Unknown enum')
    c.uint.encode(state, m)
  },
  decode (state) {
    return c.uint.decode(state)
  }
}

// @db/member
const encoding1 = {
  preencode(state, m) {
    c.string.preencode(state, m.name)
    encoding0.preencode(state, m.gender)
  },
  encode(state, m) {
    c.string.encode(state, m.name)
    encoding0.encode(state, m.gender)
  },
  decode(state) {
    const r0 = c.string.decode(state)
    const r1 = encoding0.decode(state)

    return {
      name: r0,
      gender: r1
    }
  }
}

function setVersion(v) {
  version = v
}

function encode(name, value, v = VERSION) {
  version = v
  return c.encode(getEncoding(name), value)
}

function decode(name, buffer, v = VERSION) {
  version = v
  return c.decode(getEncoding(name), buffer)
}

function getEnum(name) {
  switch (name) {
    case '@db/gender':
      return encoding0_enum
    default:
      throw new Error('Enum not found ' + name)
  }
}

function getEncoding(name) {
  switch (name) {
    case '@db/gender':
      return encoding0
    case '@db/member':
      return encoding1
    default:
      throw new Error('Encoder not found ' + name)
  }
}

function getStruct(name, v = VERSION) {
  const enc = getEncoding(name)
  return {
    preencode(state, m) {
      version = v
      enc.preencode(state, m)
    },
    encode(state, m) {
      version = v
      enc.encode(state, m)
    },
    decode(state) {
      version = v
      return enc.decode(state)
    }
  }
}

const resolveStruct = getStruct // compat

module.exports = {
  resolveStruct,
  getStruct,
  getEnum,
  getEncoding,
  encode,
  decode,
  setVersion,
  version
}
